{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "CryptogramSolver.svelte",
    "Word.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { getQuoteGenerator, toAristocratCipher } from './quotes.js';\n\n  import CryptogramSolver from './CryptogramSolver.svelte';\n\n  const getNewQuote = getQuoteGenerator();\n\n  const quote = getNewQuote();\n</script>\n\n<main>\n  {#await quote}\n    <p>Loading Quote</p>\n  {:then quote}\n    <CryptogramSolver problem={toAristocratCipher(quote)} />\n  {/await}\n</main>\n\n<style>\n  :root {\n    --amber: #ffc107;\n    --yellow: #ffeb3b;\n    --green: #4caf50;\n    --hovered-letter-color: var(--yellow);\n    --selected-letter-color: var(--amber);\n    --solved-text-color: var(--green);\n  }\n</style>\n",
    "<script>\n  import { writable } from 'svelte/store';\n  import { createEventDispatcher, onMount } from 'svelte';\n  import { alphabet, splitQuote } from './quotes.js';\n  import Word from './Word.svelte';\n\n  /** @typedef {import('./quotes.js').EncryptedQuote} EncryptedQuote */\n\n  /** @type {EncryptedQuote | null} */\n  export let problem = null;\n\n  const dispatch = createEventDispatcher();\n\n  let replacement = Array(26).fill('');\n\n  const replace = ({ from, to }) => {\n    if ((to.length != 1 || !/[a-zA-Z]/.test(to)) && to !== 'BACKSPACE') return;\n    const newReplacement = [...replacement];\n    newReplacement[alphabet.indexOf(from)] = to == 'BACKSPACE' ? '' : to;\n    replacement = newReplacement;\n  };\n\n  const isCorrect = (replacement, problem) => {\n    if (!problem) return false;\n    return [...problem.ciphertext].every((ch, i) => (\n      !alphabet.includes(ch) ||\n      problem.plaintext[i] === replacement[alphabet.indexOf(ch)]\n    ));\n  };\n\n  onMount(() => {\n    replacement = Array(26).fill('');\n  });\n\n  $: words = splitQuote(problem.ciphertext);\n  $: solved = isCorrect(replacement, problem);\n  $: if (solved) {\n    dispatch('solved');\n  }\n\n  $: console.log('problem:', problem, 'replacement', replacement);\n</script>\n\n\n<div class=\"cryptogram\" class:solved>\n  {#each words as word}\n    <Word\n      {word}\n      {replacement}\n      on:replace={(e) => replace(e.detail)}\n    />\n  {/each}\n</div>\n\n<style>\n  .cryptogram {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 2rem;\n  }\n\n  .solved {\n    color: var(--solved-text-color);\n  }\n</style>\n",
    "<script>\n  import { writable } from 'svelte/store';\n  import { createEventDispatcher } from 'svelte';\n  import { alphabet } from './quotes.js';\n\n  export let word = '';\n  export let replacement = Array(26).fill('');\n\n  const dispatch = createEventDispatcher();\n\n  /** @type {(i: number) => (e: KeyEvent) => void} */\n  const keyDown = i => e => {\n    dispatch('replace', {\n      from: word[i],\n      to: e.key.toUpperCase(),\n    });\n  };\n\n  const replaceChars = (word, replacement) => [...word].map(ch => {\n    const alphabetIdx = alphabet.indexOf(ch);\n    if (alphabetIdx === -1) return null;\n    return replacement[alphabetIdx];\n  });\n\n  // null if char is not alphabetic, '' if no replacement, char if replacement\n  $: replacedChars = replaceChars(word, replacement);\n</script>\n\n<div class=\"word\">\n  {#each word as ch, i}\n    {@const replacement = replacedChars[i]}\n    <div class=\"plain-encrypt-pair\">\n      <div class=\"cipher-letter\">{ch}</div>\n      <div\n        class=\"decrypted-letter\"\n        class:non-alphabetic={replacement === null}\n        tabindex=\"0\"\n        on:keydown={keyDown(i)}\n      >\n        <pre>{replacement}</pre>\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .word {\n    display: flex;\n    flex-direction: row;\n    gap: 0;\n  }\n\n  .plain-encrypt-pair {\n    display: flex;\n    flex-direction: column;\n    max-width: 1.5rem;\n    width: 1rem;\n    gap: 0.25rem;\n  }\n\n  .plain-encrypt-pair div {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 1.2rem;\n  }\n\n  .decrypted-letter:hover {\n    cursor: pointer;\n    background-color: var(--hovered-letter-color);\n  }\n\n  .decrypted-letter:focus {\n    background-color: var(--selected-letter-color);\n    outline: none;\n  }\n\n  .non-alphabetic {\n    display: none !important;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAmBE,KAAK,AAAC,CAAC,AACL,OAAO,CAAE,OAAO,CAChB,QAAQ,CAAE,OAAO,CACjB,OAAO,CAAE,OAAO,CAChB,sBAAsB,CAAE,aAAa,CACrC,uBAAuB,CAAE,YAAY,CACrC,mBAAmB,CAAE,YAAY,AACnC,CAAC;AC6BD,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,SAAS,CAAE,IAAI,CACf,GAAG,CAAE,IAAI,AACX,CAAC,AAED,OAAO,eAAC,CAAC,AACP,KAAK,CAAE,IAAI,mBAAmB,CAAC,AACjC,CAAC;AClBD,KAAK,8BAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,GAAG,CAAE,CAAC,AACR,CAAC,AAED,mBAAmB,8BAAC,CAAC,AACnB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,SAAS,CAAE,MAAM,CACjB,KAAK,CAAE,IAAI,CACX,GAAG,CAAE,OAAO,AACd,CAAC,AAED,kCAAmB,CAAC,GAAG,eAAC,CAAC,AACvB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,MAAM,AAChB,CAAC,AAED,+CAAiB,MAAM,AAAC,CAAC,AACvB,MAAM,CAAE,OAAO,CACf,gBAAgB,CAAE,IAAI,sBAAsB,CAAC,AAC/C,CAAC,AAED,+CAAiB,MAAM,AAAC,CAAC,AACvB,gBAAgB,CAAE,IAAI,uBAAuB,CAAC,CAC9C,OAAO,CAAE,IAAI,AACf,CAAC,AAED,eAAe,8BAAC,CAAC,AACf,OAAO,CAAE,IAAI,CAAC,UAAU,AAC1B,CAAC"
}