{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "CryptogramSolver.svelte",
    "JoinLink.svelte",
    "NameChooser.svelte",
    "OpponentProgress.svelte",
    "Word.svelte",
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { alphabet, splitQuote } from '@/js/quotes.js';\n  import { log } from '@/js/utils.js';\n\n  import Word from './Word.svelte';\n\n  /** @typedef {import('@/js/quotes.js').EncryptedQuote} EncryptedQuote */\n\n  /** @type {EncryptedQuote | null} */\n  export let problem = null;\n\n  const dispatch = createEventDispatcher();\n\n  let replacement = Array(26).fill('');\n\n  /** @type {(replacement: { from: string, to: string }) => void} */\n  const replace = ({ from, to }) => {\n    if ((to.length !== 1 || !/[a-zA-Z]/.test(to)) && to !== 'BACKSPACE') return;\n    const newReplacement = [...replacement];\n    newReplacement[alphabet.indexOf(from)] = to === 'BACKSPACE' ? '' : to;\n    replacement = newReplacement;\n  };\n\n  /** @type {(replacement: string[], problem: EncryptedQuote | null) => boolean} */\n  const isCorrect = (replacement, problem) => {\n    if (!problem) return false;\n    return [...problem.ciphertext].every(\n      (ch, i) =>\n        !alphabet.includes(ch) ||\n        problem.plaintext[i] === replacement[alphabet.indexOf(ch)]\n    );\n  };\n\n  /** @type {(replacement: string[], ciphertext: string) => boolean[]} */\n  const getProgress = (replacement, ciphertext) =>\n    [...ciphertext].map(\n      (ch) => alphabet.includes(ch) && replacement[alphabet.indexOf(ch)] !== ''\n    );\n\n  $: problem, (replacement = Array(26).fill(''));\n\n  $: words = splitQuote(problem?.ciphertext ?? '');\n  $: solved = isCorrect(replacement, problem);\n  $: if (solved) {\n    dispatch('solved');\n  }\n  $: dispatch('progress', {\n    progress: getProgress(replacement, problem?.ciphertext ?? ''),\n  });\n\n  $: log('problem:', problem, 'replacement', replacement);\n</script>\n\n{#if problem}\n  <p>Solve this quote by {problem.author}</p>\n  <div class=\"cryptogram\" class:solved>\n    {#each words as word}\n      <Word\n        {word}\n        {replacement}\n        disabled={solved}\n        on:replace={(e) => replace(e.detail)}\n        on:error\n      />\n    {/each}\n  </div>\n{/if}\n\n<style>\n  p {\n    margin: 0 0 2rem 0;\n  }\n\n  .cryptogram {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 2rem;\n  }\n\n  .solved {\n    color: var(--solved-text-color);\n  }\n</style>\n",
    "<script>\n  import { id as id_ } from '@/js/store.js';\n\n  export let id = id_;\n\n  let clicked = false;\n\n  const onClick = () => {\n    navigator.clipboard.writeText(joinLink);\n    clicked = true;\n  };\n\n  $: joinLink = `${location.href}?game=${encodeURIComponent($id)}`;\n</script>\n\n<div class=\"join-links\">\n  <button class=\"join-link\" on:click={onClick}>\n    {clicked ? 'Join Link (copied)' : 'Copy Join Link'}\n  </button>\n  <a href={joinLink}>{joinLink}</a>\n</div>\n\n<style>\n  .join-links {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 2rem;\n    align-items: center;\n  }\n\n  .join-link {\n    margin: 0;\n  }\n\n  .join-link:hover {\n    cursor: pointer;\n  }\n\n  .join-link:focus {\n    border: 1px solid #ccc;\n  }\n</style>\n",
    "<script>\n  import { gameProblem as gp, name as n } from '@/js/store.js';\n\n  export let gameProblem = gp;\n  export let name = n;\n</script>\n\n<div class=\"name-chooser\">\n  <label for=\"username\">Username</label>\n  <input\n    type=\"text\"\n    id=\"username\"\n    name=\"username\"\n    disabled={$gameProblem !== null}\n    bind:value={$name}\n  />\n</div>\n\n<style>\n  .name-chooser {\n    display: block;\n  }\n</style>\n",
    "<script>\n  import {\n    users as u,\n    gameProblem as gp,\n    timeTakenByOpponents as to,\n  } from '@/js/store.js';\n  import { fmtTime } from '@/js/utils.js';\n  import { getEmptyProgress } from '@/js/cryptoduelutils.js';\n\n  export let users = u;\n  export let gameProblem = gp;\n  export let timeTakenByOpponents = to;\n\n  $: emptyProgress = getEmptyProgress($gameProblem);\n</script>\n\n<div class=\"opponent-progress-container\">\n  {#each $users as user}\n    <div\n      class=\"user-container\"\n      class:solved={user.solved}\n      style=\"--desc: 'SOLVED ({fmtTime(\n        $timeTakenByOpponents.get(user.id) ?? 0\n      )})';\"\n    >\n      <p>{user.name}:</p>\n      <div class=\"opponent-progress\">\n        {#each user.progress ?? emptyProgress as hasFilled}\n          <div class=\"progress-item\" class:has-done={hasFilled} />\n        {/each}\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .opponent-progress-container,\n  .user-container {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .opponent-progress-container {\n    padding-bottom: 2rem;\n    gap: 1rem;\n  }\n\n  .opponent-progress {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    position: relative;\n  }\n\n  .progress-item {\n    width: 1rem;\n    height: 1rem;\n    background-color: white;\n  }\n\n  .progress-item.has-done {\n    background-color: var(--green);\n  }\n\n  .opponent-progress::before,\n  .opponent-progress::after {\n    transition: 500ms ease-out;\n    transform-origin: left;\n  }\n\n  .opponent-progress::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    transform: scaleX(0);\n    background-color: var(--green);\n  }\n\n  .solved .opponent-progress::before {\n    transform: scaleX(1);\n  }\n\n  .opponent-progress::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 0;\n    transform: translate(-5rem, -50%);\n  }\n\n  .solved .opponent-progress::after {\n    content: var(--desc);\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n</style>\n",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { alphabet } from '@/js/quotes.js';\n  import { getDuplicates } from '@/js/utils.js';\n  import { Errors } from '@/js/constants.js';\n\n  export let word = '';\n  export let replacement = Array(26).fill('');\n  export let disabled = false;\n\n  const dispatch = createEventDispatcher();\n\n  /** @type {(i: number) => (e: KeyboardEvent) => void} */\n  const keyDown = (i) => (e) => {\n    if (disabled) return;\n    if (word[i] === e.key.toUpperCase()) {\n      dispatch('error', {\n        id: Errors.NO_SELF_DECODE,\n        msg: 'Letters cannot decode to themselves',\n      });\n      return;\n    }\n\n    dispatch('replace', {\n      from: word[i],\n      to: e.key.toUpperCase(),\n    });\n  };\n\n  /** @type {(word: string, replacement: string[]) => Array<string | null>} */\n  const replaceChars = (word, replacement) =>\n    [...word].map((ch) => {\n      const alphabetIdx = alphabet.indexOf(ch);\n      if (alphabetIdx === -1) return null;\n      return replacement[alphabetIdx];\n    });\n\n  // null if char is not alphabetic, '' if no replacement, char if replacement\n  $: replacedChars = replaceChars(word, replacement);\n  $: duplicateReplacements = getDuplicates(replacement);\n</script>\n\n<div class=\"word\">\n  {#each word as ch, i}\n    {@const replacement = replacedChars[i]}\n    {@const duplicate =\n      replacement !== '' && duplicateReplacements.has(replacement)}\n    <div class=\"plain-encrypt-pair\" class:duplicate>\n      <div class=\"cipher-letter\">{ch}</div>\n      <div\n        class=\"decrypted-letter\"\n        class:non-alphabetic={replacement === null}\n        class:empty={replacement === ''}\n        tabindex=\"0\"\n        on:keydown={keyDown(i)}\n      >\n        <pre>{replacement}</pre>\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .word {\n    display: flex;\n    flex-direction: row;\n    gap: 0;\n  }\n\n  .plain-encrypt-pair {\n    display: flex;\n    flex-direction: column;\n    max-width: 1.5rem;\n    width: 1rem;\n    gap: 0.25rem;\n  }\n\n  .plain-encrypt-pair div {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 1.2rem;\n  }\n\n  .decrypted-letter:hover {\n    cursor: pointer;\n    background-color: var(--hovered-letter-color);\n  }\n\n  .decrypted-letter:focus {\n    background-color: var(--selected-letter-color);\n    outline: none;\n  }\n\n  .non-alphabetic {\n    display: none !important;\n  }\n\n  .duplicate {\n    background-color: var(--red);\n  }\n\n  .empty::before {\n    content: '-';\n    color: var(--grey);\n  }\n\n  .empty:focus::before {\n    color: white;\n  }\n</style>\n",
    "<script>\n  import { getQuoteGenerator, toAristocratCipher } from '@/js/quotes.js';\n  import { connectTo } from '@/js/networking.js';\n  import { gameProblem, users, progress, solved } from '@/js/store.js';\n  import { hivemindBrain, isHivemindBrain } from '@/js/constants.js';\n  import { confettiCelebration, showError } from '@/js/actions.js';\n  import { log } from '@/js/utils.js';\n\n  import {\n    NameChooser,\n    JoinLink,\n    CryptogramSolver,\n    OpponentProgress,\n  } from '@/components';\n\n  const getNewQuote = getQuoteGenerator();\n\n  const newProblem = () => {\n    getNewQuote().then((quote) => gameProblem.set(toAristocratCipher(quote)));\n  };\n\n  $: log('users:', $users);\n  $: if ($solved) confettiCelebration();\n</script>\n\n<canvas id=\"confetti\" />\n<main>\n  {#if isHivemindBrain}\n    <JoinLink />\n  {:else}\n    {#await connectTo(hivemindBrain ?? '')}\n      <p>Connecting to {hivemindBrain}</p>\n    {:then _}\n      <p>Successfully connected to {hivemindBrain}</p>\n    {/await}\n  {/if}\n\n  <NameChooser />\n\n  {#if $gameProblem}\n    <OpponentProgress />\n    <CryptogramSolver\n      problem={$gameProblem}\n      on:progress={(e) => progress.set(e.detail.progress)}\n      on:solved={() => solved.set(true)}\n      on:error={(e) => showError(e.detail)}\n    />\n  {/if}\n  {#if isHivemindBrain}\n    <button on:click={newProblem}> New Problem </button>\n  {/if}\n</main>\n\n<style>\n  main {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  button:focus {\n    border: 1px solid #ccc;\n  }\n\n  :global(button:hover) {\n    cursor: pointer;\n  }\n\n  :global(*:focus) {\n    outline: none;\n  }\n\n  #confetti {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: 99;\n    pointer-events: none;\n  }\n\n  :root {\n    --amber: #ffc107;\n    --yellow: #ffeb3b;\n    --green: #4caf50;\n    --red: #f44336;\n    --grey: #cccccc;\n    --hovered-letter-color: var(--yellow);\n    --selected-letter-color: var(--amber);\n    --solved-text-color: var(--green);\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}