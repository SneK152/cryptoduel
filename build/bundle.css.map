{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "CryptogramSolver.svelte",
    "OpponentProgress.svelte",
    "Word.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { getQuoteGenerator, toAristocratCipher } from './quotes.js';\n  import { connectTo } from './networking.js';\n  import { gameProblem, users, id, progress, solved } from './store.js';\n  import { hivemindBrain, isHivemindBrain } from './constants.js';\n  import { log } from './utils.js';\n\n  import CryptogramSolver from './CryptogramSolver.svelte';\n  import OpponentProgress from './OpponentProgress.svelte';\n\n  const getNewQuote = getQuoteGenerator();\n\n  const newProblem = () => {\n    getNewQuote().then(quote => gameProblem.set(toAristocratCipher(quote)));\n  };\n\n  $: joinLink = `${location.href}?game=${encodeURIComponent($id)}`;\n  $: log('users:', $users);\n</script>\n\n<main>\n  {#if isHivemindBrain}\n    <p><a href={joinLink}>{joinLink}</a></p>\n  {:else}\n    {#await connectTo(hivemindBrain)}\n      <p>Connecting to {hivemindBrain}</p>\n    {:then conn}\n      <p>Successfully connected to {hivemindBrain}</p>\n    {/await}\n  {/if}\n  {#if $gameProblem}\n    <OpponentProgress />\n    <CryptogramSolver\n      problem={$gameProblem}\n      on:progress={e => progress.set(e.detail.progress)}\n      on:solved={() => solved.set(true)}\n    />\n  {/if}\n  {#if isHivemindBrain}\n    <button on:click={newProblem}>\n      New Problem\n    </button>\n  {/if}\n</main>\n\n<style>\n  button {\n    margin-top: 2rem;\n  }\n\n  button:focus {\n    border: 1px solid #ccc;\n  }\n\n  :global(*:focus) {\n    outline: none;\n  }\n\n  :root {\n    --amber: #ffc107;\n    --yellow: #ffeb3b;\n    --green: #4caf50;\n    --hovered-letter-color: var(--yellow);\n    --selected-letter-color: var(--amber);\n    --solved-text-color: var(--green);\n  }\n</style>\n",
    "<script>\n  import { writable } from 'svelte/store';\n  import { createEventDispatcher, onMount } from 'svelte';\n  import { alphabet, splitQuote } from './quotes.js';\n  import { log } from './utils.js';\n  import Word from './Word.svelte';\n\n  /** @typedef {import('./quotes.js').EncryptedQuote} EncryptedQuote */\n\n  /** @type {EncryptedQuote | null} */\n  export let problem = null;\n\n  const dispatch = createEventDispatcher();\n\n  let replacement = Array(26).fill('');\n\n  const replace = ({ from, to }) => {\n    if ((to.length != 1 || !/[a-zA-Z]/.test(to)) && to !== 'BACKSPACE') return;\n    const newReplacement = [...replacement];\n    newReplacement[alphabet.indexOf(from)] = to == 'BACKSPACE' ? '' : to;\n    replacement = newReplacement;\n  };\n\n  const isCorrect = (replacement, problem) => {\n    if (!problem) return false;\n    return [...problem.ciphertext].every((ch, i) => (\n      !alphabet.includes(ch) ||\n      problem.plaintext[i] === replacement[alphabet.indexOf(ch)]\n    ));\n  };\n\n  const getProgress = (replacement, ciphertext) => [...ciphertext].map(\n    ch => alphabet.includes(ch) && replacement[alphabet.indexOf(ch)] !== ''\n  );\n\n  $: problem, replacement = Array(26).fill('');\n\n  $: words = splitQuote(problem.ciphertext);\n  $: solved = isCorrect(replacement, problem);\n  $: if (solved) {\n    dispatch('solved');\n  }\n  $: dispatch('progress', { progress: getProgress(replacement, problem.ciphertext) });\n\n  $: log('problem:', problem, 'replacement', replacement);\n</script>\n\n\n<div class=\"cryptogram\" class:solved>\n  {#each words as word}\n    <Word\n      {word}\n      {replacement}\n      on:replace={(e) => replace(e.detail)}\n    />\n  {/each}\n</div>\n\n<style>\n  .cryptogram {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 2rem;\n  }\n\n  .solved {\n    color: var(--solved-text-color);\n  }\n</style>\n",
    "<script>\n  import { users } from './store.js';\n</script>\n\n<div class=\"opponent-progress-container\">\n  {#each $users as user}\n    <div class=\"user-container\" class:solved={user.solved}>\n      <p>{user.name}:</p>\n      {#if user.progress == null}\n        <p>has not started yet...</p>\n      {:else}\n        <div class=\"opponent-progress\">\n          {#each user.progress as hasFilled}\n            <div class=\"progress-item\" class:has-done={hasFilled} />\n          {/each}\n        </div>\n      {/if}\n    </div>\n  {/each}\n</div>\n\n<style>\n  .opponent-progress-container, .user-container {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .opponent-progress-container {\n    padding-bottom: 2rem;\n    gap: 1rem;\n  }\n\n  .opponent-progress {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    position: relative;\n  }\n\n  .progress-item {\n    width: 1rem;\n    height: 1rem;\n    background-color: white;\n  }\n\n  .progress-item.has-done {\n    background-color: var(--green);\n  }\n\n  .opponent-progress::before, .opponent-progress::after {\n    transition: 500ms ease-out;\n    transform-origin: left;\n  }\n\n  .opponent-progress::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    transform: scaleX(0);\n    background-color: var(--green);\n  }\n\n  .solved .opponent-progress::before {\n    transform: scaleX(1);\n  }\n\n  .opponent-progress::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 0;\n    transform: translate(-5rem, -50%);\n  }\n\n  .solved .opponent-progress::after {\n    content: 'SOLVED';\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n</style>\n",
    "<script>\n  import { writable } from 'svelte/store';\n  import { createEventDispatcher } from 'svelte';\n  import { alphabet } from './quotes.js';\n\n  export let word = '';\n  export let replacement = Array(26).fill('');\n\n  const dispatch = createEventDispatcher();\n\n  /** @type {(i: number) => (e: KeyEvent) => void} */\n  const keyDown = i => e => {\n    dispatch('replace', {\n      from: word[i],\n      to: e.key.toUpperCase(),\n    });\n  };\n\n  const replaceChars = (word, replacement) => [...word].map(ch => {\n    const alphabetIdx = alphabet.indexOf(ch);\n    if (alphabetIdx === -1) return null;\n    return replacement[alphabetIdx];\n  });\n\n  // null if char is not alphabetic, '' if no replacement, char if replacement\n  $: replacedChars = replaceChars(word, replacement);\n</script>\n\n<div class=\"word\">\n  {#each word as ch, i}\n    {@const replacement = replacedChars[i]}\n    <div class=\"plain-encrypt-pair\">\n      <div class=\"cipher-letter\">{ch}</div>\n      <div\n        class=\"decrypted-letter\"\n        class:non-alphabetic={replacement === null}\n        tabindex=\"0\"\n        on:keydown={keyDown(i)}\n      >\n        <pre>{replacement}</pre>\n      </div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .word {\n    display: flex;\n    flex-direction: row;\n    gap: 0;\n  }\n\n  .plain-encrypt-pair {\n    display: flex;\n    flex-direction: column;\n    max-width: 1.5rem;\n    width: 1rem;\n    gap: 0.25rem;\n  }\n\n  .plain-encrypt-pair div {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 1.2rem;\n  }\n\n  .decrypted-letter:hover {\n    cursor: pointer;\n    background-color: var(--hovered-letter-color);\n  }\n\n  .decrypted-letter:focus {\n    background-color: var(--selected-letter-color);\n    outline: none;\n  }\n\n  .non-alphabetic {\n    display: none !important;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA8CE,MAAM,eAAC,CAAC,AACN,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,qBAAM,MAAM,AAAC,CAAC,AACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AACxB,CAAC,AAEO,OAAO,AAAE,CAAC,AAChB,OAAO,CAAE,IAAI,AACf,CAAC,AAED,KAAK,AAAC,CAAC,AACL,OAAO,CAAE,OAAO,CAChB,QAAQ,CAAE,OAAO,CACjB,OAAO,CAAE,OAAO,CAChB,sBAAsB,CAAE,aAAa,CACrC,uBAAuB,CAAE,YAAY,CACrC,mBAAmB,CAAE,YAAY,AACnC,CAAC;ACND,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,SAAS,CAAE,IAAI,CACf,GAAG,CAAE,IAAI,AACX,CAAC,AAED,OAAO,eAAC,CAAC,AACP,KAAK,CAAE,IAAI,mBAAmB,CAAC,AACjC,CAAC;AC9CD,0DAA4B,CAAE,eAAe,8BAAC,CAAC,AAC7C,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AACxB,CAAC,AAED,4BAA4B,8BAAC,CAAC,AAC5B,cAAc,CAAE,IAAI,CACpB,GAAG,CAAE,IAAI,AACX,CAAC,AAED,kBAAkB,8BAAC,CAAC,AAClB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,cAAc,8BAAC,CAAC,AACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,KAAK,AACzB,CAAC,AAED,cAAc,SAAS,8BAAC,CAAC,AACvB,gBAAgB,CAAE,IAAI,OAAO,CAAC,AAChC,CAAC,AAED,gDAAkB,QAAQ,CAAE,gDAAkB,OAAO,AAAC,CAAC,AACrD,UAAU,CAAE,KAAK,CAAC,QAAQ,CAC1B,gBAAgB,CAAE,IAAI,AACxB,CAAC,AAED,gDAAkB,QAAQ,AAAC,CAAC,AAC1B,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,OAAO,CAAC,CAAC,CACpB,gBAAgB,CAAE,IAAI,OAAO,CAAC,AAChC,CAAC,AAED,sBAAO,CAAC,iCAAkB,QAAQ,AAAC,CAAC,AAClC,SAAS,CAAE,OAAO,CAAC,CAAC,AACtB,CAAC,AAED,gDAAkB,OAAO,AAAC,CAAC,AACzB,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,CAAC,CACP,SAAS,CAAE,UAAU,KAAK,CAAC,CAAC,IAAI,CAAC,AACnC,CAAC,AAED,sBAAO,CAAC,iCAAkB,OAAO,AAAC,CAAC,AACjC,OAAO,CAAE,QAAQ,CACjB,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,AAClC,CAAC;ACnCD,KAAK,8BAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,GAAG,CAAE,CAAC,AACR,CAAC,AAED,mBAAmB,8BAAC,CAAC,AACnB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,SAAS,CAAE,MAAM,CACjB,KAAK,CAAE,IAAI,CACX,GAAG,CAAE,OAAO,AACd,CAAC,AAED,kCAAmB,CAAC,GAAG,eAAC,CAAC,AACvB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,MAAM,AAChB,CAAC,AAED,+CAAiB,MAAM,AAAC,CAAC,AACvB,MAAM,CAAE,OAAO,CACf,gBAAgB,CAAE,IAAI,sBAAsB,CAAC,AAC/C,CAAC,AAED,+CAAiB,MAAM,AAAC,CAAC,AACvB,gBAAgB,CAAE,IAAI,uBAAuB,CAAC,CAC9C,OAAO,CAAE,IAAI,AACf,CAAC,AAED,eAAe,8BAAC,CAAC,AACf,OAAO,CAAE,IAAI,CAAC,UAAU,AAC1B,CAAC"
}